MODERN JAVASCRIPT DEVELOPMENT

Moodle: where codes are kept then shared in different parts of the project. 3rd party moodles can also be included in our code. There are thousands of them which are called packages. Developers share these third party moodle on the npm repository (NPM: Node Package Manager.) These packges are used for free in our own code. for example the popular react framework or JQuery or the leaflet library. To use download and use packages, we use the npm software installed in our computer.

STEPS WE TAKE IN BUILDING A REAL WORLD APPLICATION. 

1. WRITE AND ORGANIZE CODES USING MOODLES AND THIRD PARTY LIBRARIES NEED BE.
2. ARRANGE THE WHOLE MOODLE INTO ONE FOLDER. THIS IS CALLED BUNDLING. 
3. THEN BECAUSE THERE ARE SOME BROWSERS THAT DO NOT RUN MODERN JAVASCRIPT, WE HAVE CHANGE THE CODE TO OLD JAVASCRIP AND THIS IS CALLED TRANSPILING/POLYFILLING. THIS IS DONE WITH BABEL.
4. AFTERWARDS, EVERYTHING IS BUNDLED TO JAVASCRIPT. THIS STAGE IS CALLED THE PRODUCTION STAGE.

WE DO NOT PERFORM THESE PROCESSES BY OURSELVES. WE DO USE SPECIAL TOOL TO DO THIS. WE EITHER USE WEBPACK OR PARCEL. AND THESES ARE CALLED JAVASCRPT BUNDLERS. THEY TAKE ALL OUR CODE AND TRANFORM THEM INTO JAVASCRIPT BUNDLE. WEBPACK IS THE MOST POPULAR BUT IT CAN BE A BIT HARD AND CONFUSING TO SET IT UP BECAUSE THERE ARE A LOT THAT NEEDS TO BE CONFIGURED MANUALLY IN ORDER TO MAKE IT WORK PROPERLY. PACEL IS A ZERO CONFIGURATION BUNDLER WHICH SIMPLY WORKS OUT OF THE BOX

IN THIS SECTION, WE ARE GOING TO USE PARCEL.

NPM ALLOW US TO DOWNLOAD AND MANAGE TOOLS EG LIVESERVER, PACEL, BABEL WHICH COVERTS FILES TO ES5.


MODULE ARE REUSABLE PIECE OF CODE THAT ENCAPSULATES IMPLEMENTATION DETAILS; ITS SOUNDS LIKE AN OBJECT, BUT A MODULE IS A STANDALONE FILE, BUT IT DOESN'T HAVE TO BE. SO A MOODLE CAN HAVE CODE, BUT IT COULD HAVE IMPORTS AND EXPORT. WITH EXPORT, WE CAN EXPORT CODE OUT OF A MOODLE (PUBLIC API). PUBLIC APIs ARE CONSUMED BY IMPORTING VALUES INTO A MODULE. SO IT MEANS A MODULE CAN IMPORT VALUES FROM ANOTHER MODULE. SO THE MODULE WE ARE IMPORTING FROM ARE CALLED THE DEPENDENCIES OF THE IMPORTING MODULE.

ADVANTAGES OF MODULES

THEY ARE SMALL BUILDING BLOCKS FOR BUILDING SOFTWARES.
MOODLES CAN BE DEVELOPED IN ISOLATION WITHOUT THINKING ABOUT THE ENTIRE CODEBASE.
ABSTRACT CODE: IMPLEMENT LOW-LEVEL CODE IN MODULES AND IMPORT THESE ABSTRACTIONS INTO OTHER MODULES.
ORGANIZED CODE: MODULES NATURALLY LEAD TO AN ORGANIZED CODEBASE


Modules are stored in files, exacty one module per file. variables are private to a module unlike that of a script that is global and to be able to use a vaiable that are in a module, you need to export it. this is to prevent name class between module that is why ES6 included such implementation. ES6 modules are always executed in strict mode. while script variables are executed in sloppy mode by default. with modules, there is no need to declare strict mode. the this keyword is always undefied in the module while in script, it points to the window. in practice importing values is always the first thing to do in a module. to link moodle to a Html file, we need to use the strict tag with the type set to module instead of a plane script tag. Downloading the module happens automatically in an asynchronous way, while scripts are downloaded in a synchronous way.

How modules import other modules behind the scenes.

when you import a module, the the codes and variables in the imported module will be parsed first before the main code of the importer is executed. in other words, the code of the imported file will be read before the code of the non imported file.  it is necessary for the importing of module to happen asynchronously so that what is not needed won't be imported while importation would happen synchronously.